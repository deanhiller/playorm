#----------------------------------------------------------------------
#DO NOT MAKE CHANGES TO THIS FILE, this file is overwriten 
#every time build is run.  To personalize make changes to 
#ant.properties, dependencies.xml, and
#release.xml.  All which are in the [basedir]/bldfiles directory
#----------------------------------------------------------------------


#-----------------------------------------------------------------------
# OUTPUT DIRECTORIES
#-----------------------------------------------------------------------
generated       =output

manifest        =${generated}/manifest
		#will contain a generated manifest

build           =${generated}/classes
		#will contain all the *.class files after compile
		#will contain all the *.jpg        files from ${properties}
		#will contain all the *.properties files from ${properties}
		#will contain all the *.gif        files from ${properties}
		#will contain all the *.html       files from ${properties}
		#will contain all the *.*          files from ${properties}
		#will NOT contain *.html, *.htm, *.jpg, *.gif from ${javacode}

webstuff        =${generated}/webroot

jardist         =${generated}/jardist
		#will contain a   *.jar containing everything in ${build}
wardist         =${generated}/wardist
		#will contain a   *.war containing everything in ${build} and ${webroot}
		
dist            =${generated}/dist
		#contains the release that gets released to the world

reports         =${generated}/reports
codecov.report  =${reports}/codecoverage
pmd.report 		=${reports}/pmd
		#contains the code coverage reports of what the unit tests
		#covered
		
findbugs.report =${reports}/findbugs
javadoc         =${reports}/javadoc
		#contains the javadoc of biz.xsoftware.api

allcodecov      =${generated}/codecoverage
codecov.temp    =${allcodecov}/misc
        #previously used by emma, not used by cobertura so this is useless property for now
codecov.classes =${allcodecov}/instrumented-classes
        #intermediate directory that contains instrumented classes to
        #run testall against so a code coverage report can be spit out.
codecov.instrument.file=${codecov.classes}/cobertura.ser
codecov.jar     =${allcodecov}/instrumented-jar

junit.results   =${generated}/test_results
		#contains junit test results

staging         =${generated}/staging
projstaging     =${generated}/staging/${name}
		#will contain all *.html generated by javadoc
		#will contain all *.html from ${javacode} directory(such as package.html)
		#will contain all *.jpg  from ${javacode} directory
		#will contain all *.gif  from ${javacode} directory

rmi.stubs       =${generated}/rmistubs
		#contains all Remote*.class files copied from ${build}
		#contains all *_stub.class  files copied from ${build}
		#contains all *_skel.class  files copied from ${build}
		#this directory is only created if RMI*.class exists

test.area	=${generated}/tests
		#This is sometimes created by JUnit tests to do temporary
		#testing.  It usually gets deleted afterwards.

gen.src		=${generated}/src
		#generated source code
		
#-----------------------------------------------------------------------
# INPUT DIRECTORIES - don't change these after the project is started.
#-----------------------------------------------------------------------
projectPath     =.

input		=input
		#contains all stuff that is an input into the build

config		=bldfiles
		#contains build.xml for the module, and any other build scripts
		#plus build property files

javacode        =${input}/javasrc
		#Contains all *.java source files
		#Contains all *.properties files that will go into the jar
		#Contains all *.xml files that will go into the jar
		#Contains all *.* that will go into the jar except doc_*.gif and doc_*.jpg
		#Contains all *.html files needed by javadoc
		#Contains all doc_*.jpg  files needed by javadoc
		#Contains all doc_*.gif  files needed by javadoc
		#Contains all *.*    files needed by javadoc

webroot         =${input}/webroot
        #Contains all html, jsp, gif, jpg's, WEB-INF/web.xml, WEB-INF/faces-config.xml, etc. etc
        
libinclude      =${generated}/jardist
		#contains all *.jar needed to run the app and that need to be deployed with the app
		#does not contain *.jars needed to compile the app(such as junit.jar)
libexclude      =${input}/libexclude
        #contains all the *.jar that are not needed to run the app.  They are for testing or
		#would already be deployed as services in the framework as in the case of an osgi logging
		#service for example

native  =${input}/native
        #contains JNI C header file

schemas =${input}/schemas
		#contains xsd schemas

#-----------------------------------------------------------------------
# MISCELLANEOUS
#-----------------------------------------------------------------------
junit.pattern1=**/Test*.class
#junit.pattern2=**/test/IntegTest*.class

javadoc.pattern=**/*.java

tool.dir=tools
package.list=${tool.dir}/package-list

build.sysclasspath=ignore
		# Change this value and I call you a complete idiot(cp = classpath)
		# ignore - trust build file to get the cp right
		# first  - concatenate build file    cp AFTER build runners cp
		# last   - concatenate build runners cp AFTER build file cp

#output		= build.log
		#uncomment this to activate the logging
